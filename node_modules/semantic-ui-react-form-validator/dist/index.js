'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var propTypes = _interopDefault(require('prop-types'));
var semanticUiReact = require('semantic-ui-react');

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

/**
 * @this {Promise}
 */
function finallyConstructor(callback) {
  var constructor = this.constructor;
  return this.then(
    function(value) {
      return constructor.resolve(callback()).then(function() {
        return value;
      });
    },
    function(reason) {
      return constructor.resolve(callback()).then(function() {
        return constructor.reject(reason);
      });
    }
  );
}

// Store setTimeout reference so promise-polyfill will be unaffected by
// other code modifying setTimeout (like sinon.useFakeTimers())
var setTimeoutFunc = setTimeout;

function noop() {}

// Polyfill for Function.prototype.bind
function bind(fn, thisArg) {
  return function() {
    fn.apply(thisArg, arguments);
  };
}

/**
 * @constructor
 * @param {Function} fn
 */
function Promise$1(fn) {
  if (!(this instanceof Promise$1))
    throw new TypeError('Promises must be constructed via new');
  if (typeof fn !== 'function') throw new TypeError('not a function');
  /** @type {!number} */
  this._state = 0;
  /** @type {!boolean} */
  this._handled = false;
  /** @type {Promise|undefined} */
  this._value = undefined;
  /** @type {!Array<!Function>} */
  this._deferreds = [];

  doResolve(fn, this);
}

function handle(self, deferred) {
  while (self._state === 3) {
    self = self._value;
  }
  if (self._state === 0) {
    self._deferreds.push(deferred);
    return;
  }
  self._handled = true;
  Promise$1._immediateFn(function() {
    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;
    if (cb === null) {
      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);
      return;
    }
    var ret;
    try {
      ret = cb(self._value);
    } catch (e) {
      reject(deferred.promise, e);
      return;
    }
    resolve(deferred.promise, ret);
  });
}

function resolve(self, newValue) {
  try {
    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
    if (newValue === self)
      throw new TypeError('A promise cannot be resolved with itself.');
    if (
      newValue &&
      (typeof newValue === 'object' || typeof newValue === 'function')
    ) {
      var then = newValue.then;
      if (newValue instanceof Promise$1) {
        self._state = 3;
        self._value = newValue;
        finale(self);
        return;
      } else if (typeof then === 'function') {
        doResolve(bind(then, newValue), self);
        return;
      }
    }
    self._state = 1;
    self._value = newValue;
    finale(self);
  } catch (e) {
    reject(self, e);
  }
}

function reject(self, newValue) {
  self._state = 2;
  self._value = newValue;
  finale(self);
}

function finale(self) {
  if (self._state === 2 && self._deferreds.length === 0) {
    Promise$1._immediateFn(function() {
      if (!self._handled) {
        Promise$1._unhandledRejectionFn(self._value);
      }
    });
  }

  for (var i = 0, len = self._deferreds.length; i < len; i++) {
    handle(self, self._deferreds[i]);
  }
  self._deferreds = null;
}

/**
 * @constructor
 */
function Handler(onFulfilled, onRejected, promise) {
  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
  this.promise = promise;
}

/**
 * Take a potentially misbehaving resolver function and make sure
 * onFulfilled and onRejected are only called once.
 *
 * Makes no guarantees about asynchrony.
 */
function doResolve(fn, self) {
  var done = false;
  try {
    fn(
      function(value) {
        if (done) return;
        done = true;
        resolve(self, value);
      },
      function(reason) {
        if (done) return;
        done = true;
        reject(self, reason);
      }
    );
  } catch (ex) {
    if (done) return;
    done = true;
    reject(self, ex);
  }
}

Promise$1.prototype['catch'] = function(onRejected) {
  return this.then(null, onRejected);
};

Promise$1.prototype.then = function(onFulfilled, onRejected) {
  // @ts-ignore
  var prom = new this.constructor(noop);

  handle(this, new Handler(onFulfilled, onRejected, prom));
  return prom;
};

Promise$1.prototype['finally'] = finallyConstructor;

Promise$1.all = function(arr) {
  return new Promise$1(function(resolve, reject) {
    if (!arr || typeof arr.length === 'undefined')
      throw new TypeError('Promise.all accepts an array');
    var args = Array.prototype.slice.call(arr);
    if (args.length === 0) return resolve([]);
    var remaining = args.length;

    function res(i, val) {
      try {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          var then = val.then;
          if (typeof then === 'function') {
            then.call(
              val,
              function(val) {
                res(i, val);
              },
              reject
            );
            return;
          }
        }
        args[i] = val;
        if (--remaining === 0) {
          resolve(args);
        }
      } catch (ex) {
        reject(ex);
      }
    }

    for (var i = 0; i < args.length; i++) {
      res(i, args[i]);
    }
  });
};

Promise$1.resolve = function(value) {
  if (value && typeof value === 'object' && value.constructor === Promise$1) {
    return value;
  }

  return new Promise$1(function(resolve) {
    resolve(value);
  });
};

Promise$1.reject = function(value) {
  return new Promise$1(function(resolve, reject) {
    reject(value);
  });
};

Promise$1.race = function(values) {
  return new Promise$1(function(resolve, reject) {
    for (var i = 0, len = values.length; i < len; i++) {
      values[i].then(resolve, reject);
    }
  });
};

// Use polyfill for setImmediate for performance gains
Promise$1._immediateFn =
  (typeof setImmediate === 'function' &&
    function(fn) {
      setImmediate(fn);
    }) ||
  function(fn) {
    setTimeoutFunc(fn, 0);
  };

Promise$1._unhandledRejectionFn = function _unhandledRejectionFn(err) {
  if (typeof console !== 'undefined' && console) {
    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console
  }
};

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

function componentWillMount() {
  // Call this.constructor.gDSFP to support sub-classes.
  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
  if (state !== null && state !== undefined) {
    this.setState(state);
  }
}

function componentWillReceiveProps(nextProps) {
  // Call this.constructor.gDSFP to support sub-classes.
  // Use the setState() updater to ensure state isn't stale in certain edge cases.
  function updater(prevState) {
    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
    return state !== null && state !== undefined ? state : null;
  }
  // Binding "this" is important for shallow renderer support.
  this.setState(updater.bind(this));
}

function componentWillUpdate(nextProps, nextState) {
  try {
    var prevProps = this.props;
    var prevState = this.state;
    this.props = nextProps;
    this.state = nextState;
    this.__reactInternalSnapshotFlag = true;
    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
      prevProps,
      prevState
    );
  } finally {
    this.props = prevProps;
    this.state = prevState;
  }
}

// React may warn about cWM/cWRP/cWU methods being deprecated.
// Add a flag to suppress these warnings for this special case.
componentWillMount.__suppressDeprecationWarning = true;
componentWillReceiveProps.__suppressDeprecationWarning = true;
componentWillUpdate.__suppressDeprecationWarning = true;

function polyfill(Component) {
  var prototype = Component.prototype;

  if (!prototype || !prototype.isReactComponent) {
    throw new Error('Can only polyfill class components');
  }

  if (
    typeof Component.getDerivedStateFromProps !== 'function' &&
    typeof prototype.getSnapshotBeforeUpdate !== 'function'
  ) {
    return Component;
  }

  // If new component APIs are defined, "unsafe" lifecycles won't be called.
  // Error if any of these lifecycles are present,
  // Because they would work differently between older and newer (16.3+) versions of React.
  var foundWillMountName = null;
  var foundWillReceivePropsName = null;
  var foundWillUpdateName = null;
  if (typeof prototype.componentWillMount === 'function') {
    foundWillMountName = 'componentWillMount';
  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
    foundWillMountName = 'UNSAFE_componentWillMount';
  }
  if (typeof prototype.componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'componentWillReceiveProps';
  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
  }
  if (typeof prototype.componentWillUpdate === 'function') {
    foundWillUpdateName = 'componentWillUpdate';
  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
    foundWillUpdateName = 'UNSAFE_componentWillUpdate';
  }
  if (
    foundWillMountName !== null ||
    foundWillReceivePropsName !== null ||
    foundWillUpdateName !== null
  ) {
    var componentName = Component.displayName || Component.name;
    var newApiName =
      typeof Component.getDerivedStateFromProps === 'function'
        ? 'getDerivedStateFromProps()'
        : 'getSnapshotBeforeUpdate()';

    throw Error(
      'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
        componentName +
        ' uses ' +
        newApiName +
        ' but also contains the following legacy lifecycles:' +
        (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') +
        (foundWillReceivePropsName !== null
          ? '\n  ' + foundWillReceivePropsName
          : '') +
        (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') +
        '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' +
        'https://fb.me/react-async-component-lifecycle-hooks'
    );
  }

  // React <= 16.2 does not support static getDerivedStateFromProps.
  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
  // Newer versions of React will ignore these lifecycles if gDSFP exists.
  if (typeof Component.getDerivedStateFromProps === 'function') {
    prototype.componentWillMount = componentWillMount;
    prototype.componentWillReceiveProps = componentWillReceiveProps;
  }

  // React <= 16.2 does not support getSnapshotBeforeUpdate.
  // As a workaround, use cWU to invoke the new lifecycle.
  // Newer versions of React will ignore that lifecycle if gSBU exists.
  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
    if (typeof prototype.componentDidUpdate !== 'function') {
      throw new Error(
        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'
      );
    }

    prototype.componentWillUpdate = componentWillUpdate;

    var componentDidUpdate = prototype.componentDidUpdate;

    prototype.componentDidUpdate = function componentDidUpdatePolyfill(
      prevProps,
      prevState,
      maybeSnapshot
    ) {
      // 16.3+ will not execute our will-update method;
      // It will pass a snapshot value to did-update though.
      // Older versions will require our polyfilled will-update value.
      // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
      // Because for <= 15.x versions this might be a "prevContext" object.
      // We also can't just check "__reactInternalSnapshot",
      // Because get-snapshot might return a falsy value.
      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
      var snapshot = this.__reactInternalSnapshotFlag
        ? this.__reactInternalSnapshot
        : maybeSnapshot;

      componentDidUpdate.call(this, prevProps, prevState, snapshot);
    };
  }

  return Component;
}

var reactLifecyclesCompat_es = /*#__PURE__*/Object.freeze({
	polyfill: polyfill
});

var isExisty = function isExisty(value) {
    return value !== null && value !== undefined;
};

var _isEmpty = function _isEmpty(value) {
    if (value instanceof Array) {
        return value.length === 0;
    }
    return value === '' || !isExisty(value);
};

var isEmptyTrimed = function isEmptyTrimed(value) {
    if (typeof value === 'string') {
        return value.trim() === '';
    }
    return true;
};

var validations = {
    matchRegexp: function matchRegexp(value, regexp) {
        var validationRegexp = regexp instanceof RegExp ? regexp : new RegExp(regexp);
        return _isEmpty(value) || validationRegexp.test(value);
    },

    // eslint-disable-next-line
    isEmail: function isEmail(value) {
        return validations.matchRegexp(value, /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i);
    },

    isEmpty: function isEmpty(value) {
        return _isEmpty(value);
    },

    required: function required(value) {
        return !_isEmpty(value);
    },

    trim: function trim(value) {
        return !isEmptyTrimed(value);
    },

    isNumber: function isNumber(value) {
        return validations.matchRegexp(value, /^-?[0-9]\d*(\d+)?$/i);
    },

    isFloat: function isFloat(value) {
        return validations.matchRegexp(value, /^(?:-?[1-9]\d*|-?0)?(?:\.\d+)?$/i);
    },

    isPositive: function isPositive(value) {
        if (isExisty(value)) {
            return (validations.isNumber(value) || validations.isFloat(value)) && value >= 0;
        }
        return true;
    },

    maxNumber: function maxNumber(value, max) {
        return _isEmpty(value) || parseInt(value, 10) <= parseInt(max, 10);
    },

    minNumber: function minNumber(value, min) {
        return _isEmpty(value) || parseInt(value, 10) >= parseInt(min, 10);
    },

    maxFloat: function maxFloat(value, max) {
        return _isEmpty(value) || parseFloat(value) <= parseFloat(max);
    },

    minFloat: function minFloat(value, min) {
        return _isEmpty(value) || parseFloat(value) >= parseFloat(min);
    },

    isString: function isString(value) {
        return !_isEmpty(value) || typeof value === 'string' || value instanceof String;
    },
    minStringLength: function minStringLength(value, length) {
        return validations.isString(value) && value.length >= length;
    },
    maxStringLength: function maxStringLength(value, length) {
        return validations.isString(value) && value.length <= length;
    },

    // eslint-disable-next-line no-undef
    isFile: function isFile(value) {
        return value instanceof File;
    },
    maxFileSize: function maxFileSize(value, max) {
        return validations.isFile(value) && value.size <= parseInt(max, 10);
    },
    allowedExtensions: function allowedExtensions(value, fileTypes) {
        return validations.isFile(value) && fileTypes.split(',').indexOf(value.type) !== -1;
    }
};

var ValidationRules = validations;

var ValidatorForm_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



var _react2 = _interopRequireDefault(React__default);



var _propTypes2 = _interopRequireDefault(propTypes);



var _promisePolyfill2 = _interopRequireDefault(Promise$1);



var _ValidationRules2 = _interopRequireDefault(ValidationRules);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable */

/* eslint-enable */


var ValidatorForm = function (_React$Component) {
    _inherits(ValidatorForm, _React$Component);

    function ValidatorForm() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, ValidatorForm);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ValidatorForm.__proto__ || Object.getPrototypeOf(ValidatorForm)).call.apply(_ref, [this].concat(args))), _this), _this.getChildContext = function () {
            return {
                form: {
                    attachToForm: _this.attachToForm,
                    detachFromForm: _this.detachFromForm,
                    instantValidate: _this.instantValidate,
                    debounceTime: _this.debounceTime
                }
            };
        }, _this.instantValidate = _this.props.instantValidate !== undefined ? _this.props.instantValidate : true, _this.debounceTime = _this.props.debounceTime, _this.childs = [], _this.errors = [], _this.attachToForm = function (component) {
            if (_this.childs.indexOf(component) === -1) {
                _this.childs.push(component);
            }
        }, _this.detachFromForm = function (component) {
            var componentPos = _this.childs.indexOf(component);
            if (componentPos !== -1) {
                _this.childs = _this.childs.slice(0, componentPos).concat(_this.childs.slice(componentPos + 1));
            }
        }, _this.submit = function (event) {
            if (event) {
                event.preventDefault();
            }
            _this.errors = [];
            _this.walk(_this.childs).then(function (result) {
                if (_this.errors.length) {
                    _this.props.onError(_this.errors);
                }
                if (result) {
                    _this.props.onSubmit(event);
                }
                return result;
            });
        }, _this.walk = function (children, dryRun) {
            var self = _this;
            return new _promisePolyfill2.default(function (resolve) {
                var result = true;
                if (Array.isArray(children)) {
                    _promisePolyfill2.default.all(children.map(function (input) {
                        return self.checkInput(input, dryRun);
                    })).then(function (data) {
                        data.forEach(function (item) {
                            if (!item) {
                                result = false;
                            }
                        });
                        resolve(result);
                    });
                } else {
                    self.walk([children], dryRun).then(function (result) {
                        return resolve(result);
                    });
                }
            });
        }, _this.checkInput = function (input, dryRun) {
            return new _promisePolyfill2.default(function (resolve) {
                var result = true;
                var validators = input.props.validators;
                if (validators) {
                    _this.validate(input, true, dryRun).then(function (data) {
                        if (!data) {
                            result = false;
                        }
                        resolve(result);
                    });
                } else {
                    resolve(result);
                }
            });
        }, _this.validate = function (input, includeRequired, dryRun) {
            return new _promisePolyfill2.default(function (resolve) {
                var _input$props = input.props,
                    value = _input$props.value,
                    validators = _input$props.validators;

                var result = [];
                var valid = true;
                var validations = _promisePolyfill2.default.all(validators.map(function (validator) {
                    return _promisePolyfill2.default.all([_this.constructor.getValidator(validator, value, includeRequired)]).then(function (data) {
                        result.push({ input: input, result: data && data[0] });
                        input.validate(input.props.value, true, dryRun);
                    });
                }));
                validations.then(function () {
                    result.forEach(function (item) {
                        if (!item.result) {
                            valid = false;
                            _this.errors.push(item.input);
                        }
                    });
                    resolve(valid);
                });
            });
        }, _this.find = function (collection, fn) {
            for (var i = 0, l = collection.length; i < l; i++) {
                var item = collection[i];
                if (fn(item)) {
                    return item;
                }
            }
            return null;
        }, _this.resetValidations = function () {
            _this.childs.forEach(function (child) {
                child.validateDebounced.cancel();
                child.setState({ isValid: true });
            });
        }, _this.isFormValid = function () {
            var dryRun = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            return _this.walk(_this.childs, dryRun);
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(ValidatorForm, [{
        key: 'render',
        value: function render() {
            // eslint-disable-next-line
            var _props = this.props,
                onSubmit = _props.onSubmit,
                instantValidate = _props.instantValidate,
                onError = _props.onError,
                debounceTime = _props.debounceTime,
                children = _props.children,
                rest = _objectWithoutProperties(_props, ['onSubmit', 'instantValidate', 'onError', 'debounceTime', 'children']);

            return _react2.default.createElement(
                'form',
                _extends({}, rest, { onSubmit: this.submit }),
                children
            );
        }
    }]);

    return ValidatorForm;
}(_react2.default.Component);

ValidatorForm.getValidator = function (validator, value, includeRequired) {
    var result = true;
    var name = validator;
    if (name !== 'required' || includeRequired) {
        var extra = void 0;
        var splitIdx = validator.indexOf(':');
        if (splitIdx !== -1) {
            name = validator.substring(0, splitIdx);
            extra = validator.substring(splitIdx + 1);
        }
        result = _ValidationRules2.default[name](value, extra);
    }
    return result;
};

ValidatorForm.addValidationRule = function (name, callback) {
    _ValidationRules2.default[name] = callback;
};

ValidatorForm.childContextTypes = {
    form: _propTypes2.default.object
};

ValidatorForm.propTypes = {
    onSubmit: _propTypes2.default.func.isRequired,
    instantValidate: _propTypes2.default.bool,
    children: _propTypes2.default.node,
    onError: _propTypes2.default.func,
    debounceTime: _propTypes2.default.number
};

ValidatorForm.defaultProps = {
    onError: function onError() {},
    debounceTime: 0
};

exports.default = ValidatorForm;
});

unwrapExports(ValidatorForm_1);

var utils = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
    value: true
});
var debounce = function debounce(func, wait, immediate) {
    var timeout = void 0;
    function cancel() {
        if (timeout !== undefined) {
            clearTimeout(timeout);
        }
    }
    var debounced = function debounced() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var context = this;
        var later = function delayed() {
            timeout = null;
            if (!immediate) {
                func.apply(context, args);
            }
        };
        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) {
            func.apply(context, args);
        }
    };
    debounced.cancel = cancel;
    return debounced;
};

exports.debounce = debounce;
});

unwrapExports(utils);
var utils_1 = utils.debounce;

var ValidatorComponent_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



var _react2 = _interopRequireDefault(React__default);



var _propTypes2 = _interopRequireDefault(propTypes);



var _promisePolyfill2 = _interopRequireDefault(Promise$1);





var _ValidatorForm2 = _interopRequireDefault(ValidatorForm_1);



function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable */

/* eslint-enable */


var ValidatorComponent = function (_React$Component) {
    _inherits(ValidatorComponent, _React$Component);

    function ValidatorComponent() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, ValidatorComponent);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ValidatorComponent.__proto__ || Object.getPrototypeOf(ValidatorComponent)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            isValid: true,
            value: _this.props.value,
            errorMessages: _this.props.errorMessages,
            validators: _this.props.validators
        }, _this.getErrorMessage = function () {
            var errorMessages = _this.state.errorMessages;

            var type = typeof errorMessages === 'undefined' ? 'undefined' : _typeof(errorMessages);

            if (type === 'string') {
                return errorMessages;
            } else if (type === 'object') {
                if (_this.invalid.length > 0) {
                    return errorMessages[_this.invalid[0]];
                }
            }
            // eslint-disable-next-line
            console.log('unknown errorMessages type', errorMessages);
            return true;
        }, _this.instantValidate = true, _this.invalid = [], _this.configure = function () {
            _this.context.form.attachToForm(_this);
            _this.instantValidate = _this.context.form.instantValidate;
            _this.debounceTime = _this.context.form.debounceTime;
            _this.validateDebounced = (0, utils.debounce)(_this.validate, _this.debounceTime);
        }, _this.validate = function (value) {
            var includeRequired = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var dryRun = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            var validations = _promisePolyfill2.default.all(_this.state.validators.map(function (validator) {
                return _ValidatorForm2.default.getValidator(validator, value, includeRequired);
            }));

            validations.then(function (results) {
                _this.invalid = [];
                var valid = true;
                results.forEach(function (result, key) {
                    if (!result) {
                        valid = false;
                        _this.invalid.push(key);
                    }
                });
                if (!dryRun) {
                    _this.setState({ isValid: valid }, function () {
                        _this.props.validatorListener(_this.state.isValid);
                    });
                }
            });
        }, _this.isValid = function () {
            return _this.state.isValid;
        }, _this.makeInvalid = function () {
            _this.setState({ isValid: false });
        }, _this.makeValid = function () {
            _this.setState({ isValid: true });
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(ValidatorComponent, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.configure();
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {
            return this.state !== nextState || this.props !== nextProps;
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps, prevState) {
            if (this.instantValidate && this.props.value !== prevState.value) {
                this.validateDebounced(this.props.value, this.props.withRequiredValidator);
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.context.form.detachFromForm(this);
            this.validateDebounced.cancel();
        }
    }], [{
        key: 'getDerivedStateFromProps',
        value: function getDerivedStateFromProps(nextProps, prevState) {
            if (nextProps.validators && nextProps.errorMessages && (prevState.validators !== nextProps.validators || prevState.errorMessages !== nextProps.errorMessages)) {
                return {
                    value: nextProps.value,
                    validators: nextProps.validators,
                    errorMessages: nextProps.errorMessages
                };
            }

            return {
                value: nextProps.value
            };
        }
    }]);

    return ValidatorComponent;
}(_react2.default.Component);

ValidatorComponent.contextTypes = {
    form: _propTypes2.default.object
};

ValidatorComponent.propTypes = {
    errorMessages: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.string]),
    validators: _propTypes2.default.array,
    value: _propTypes2.default.any,
    validatorListener: _propTypes2.default.func,
    withRequiredValidator: _propTypes2.default.bool
};

ValidatorComponent.defaultProps = {
    errorMessages: 'error',
    validators: [],
    validatorListener: function validatorListener() {}
};

(0, reactLifecyclesCompat_es.polyfill)(ValidatorComponent);

exports.default = ValidatorComponent;
});

unwrapExports(ValidatorComponent_1);

var lib = createCommonjsModule(function (module, exports) {



var _ValidatorComponent2 = _interopRequireDefault(ValidatorComponent_1);



var _ValidatorForm2 = _interopRequireDefault(ValidatorForm_1);



var _ValidationRules2 = _interopRequireDefault(ValidationRules);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.ValidatorComponent = _ValidatorComponent2.default;
exports.ValidatorForm = _ValidatorForm2.default;
exports.ValidationRules = _ValidationRules2.default;
});

unwrapExports(lib);
var lib_1 = lib.ValidatorComponent;
var lib_2 = lib.ValidatorForm;
var lib_3 = lib.ValidationRules;

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

// import {DateInput} from 'semantic-ui-calendar-react';
// import {ReactComponent as AddImg} from '../images/add-image.svg';
var Field = function (_Component) {
    inherits(Field, _Component);

    function Field() {
        classCallCheck(this, Field);
        return possibleConstructorReturn(this, (Field.__proto__ || Object.getPrototypeOf(Field)).apply(this, arguments));
    }

    createClass(Field, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                width = _props.width,
                error = _props.error,
                errormsg = _props.errormsg,
                label = _props.label,
                rest = objectWithoutProperties(_props, ['width', 'error', 'errormsg', 'label']);

            return React__default.createElement(
                semanticUiReact.Form.Field,
                { width: width || 12, error: error },
                this.props.inline ? React__default.createElement(semanticUiReact.Input, _extends({}, rest, { label: label })) : React__default.createElement(
                    React__default.Fragment,
                    null,
                    React__default.createElement(
                        'label',
                        null,
                        label
                    ),
                    ' ',
                    React__default.createElement(semanticUiReact.Input, rest)
                ),
                error ? React__default.createElement(
                    semanticUiReact.Label,
                    { pointing: true },
                    errormsg
                ) : ""
            );
        }
    }]);
    return Field;
}(React.Component);
var TextArea = function (_Component2) {
    inherits(TextArea, _Component2);

    function TextArea() {
        classCallCheck(this, TextArea);
        return possibleConstructorReturn(this, (TextArea.__proto__ || Object.getPrototypeOf(TextArea)).apply(this, arguments));
    }

    createClass(TextArea, [{
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                width = _props2.width,
                error = _props2.error,
                errormsg = _props2.errormsg,
                label = _props2.label,
                rest = objectWithoutProperties(_props2, ['width', 'error', 'errormsg', 'label']);

            return React__default.createElement(
                semanticUiReact.Form.Field,
                { width: width, error: error },
                label ? React__default.createElement(
                    'label',
                    null,
                    label
                ) : null,
                React__default.createElement(semanticUiReact.TextArea, rest),
                error ? React__default.createElement(
                    semanticUiReact.Label,
                    { pointing: true },
                    errormsg
                ) : ""
            );
        }
    }]);
    return TextArea;
}(React.Component);

var Drop = function (_Component3) {
    inherits(Drop, _Component3);

    function Drop() {
        classCallCheck(this, Drop);
        return possibleConstructorReturn(this, (Drop.__proto__ || Object.getPrototypeOf(Drop)).apply(this, arguments));
    }

    createClass(Drop, [{
        key: 'render',
        value: function render() {
            var _props3 = this.props,
                width = _props3.width,
                error = _props3.error,
                errormsg = _props3.errormsg,
                label = _props3.label,
                rest = objectWithoutProperties(_props3, ['width', 'error', 'errormsg', 'label']);
            // console.log("dropdown label",label)

            return React__default.createElement(
                semanticUiReact.Form.Field,
                { width: width || 12, error: error },
                this.props.inline ? React__default.createElement(
                    'span',
                    null,
                    label,
                    ' \xA0 ',
                    React__default.createElement(semanticUiReact.Dropdown, _extends({ inline: true }, rest))
                ) : React__default.createElement(
                    React__default.Fragment,
                    null,
                    React__default.createElement(
                        'label',
                        null,
                        label
                    ),
                    React__default.createElement(semanticUiReact.Dropdown, rest)
                ),
                error ? React__default.createElement(
                    semanticUiReact.Label,
                    { pointing: true },
                    errormsg
                ) : ""
            );
        }
    }]);
    return Drop;
}(React.Component);

var Input = function (_ValidatorComponent) {
    inherits(Input, _ValidatorComponent);

    function Input() {
        classCallCheck(this, Input);
        return possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).apply(this, arguments));
    }

    createClass(Input, [{
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                errorMessages = _props.errorMessages,
                validators = _props.validators,
                requiredError = _props.requiredError,
                validatorListener = _props.validatorListener,
                width = _props.width,
                rest = objectWithoutProperties(_props, ['errorMessages', 'validators', 'requiredError', 'validatorListener', 'width']);

            return React__default.createElement(Field, _extends({}, rest, {
                width: width,
                error: !this.state.isValid,
                ref: function ref(r) {
                    _this2.input = r;
                },
                errormsg: this.errorText()
            }));
        }
    }, {
        key: 'errorText',
        value: function errorText() {
            var isValid = this.state.isValid;


            if (isValid) {
                return null;
            }

            return React__default.createElement(
                'div',
                { style: { color: 'red' } },
                this.getErrorMessage()
            );
        }
    }]);
    return Input;
}(lib_1);

var TextArea$1 = function (_ValidatorComponent2) {
    inherits(TextArea$$1, _ValidatorComponent2);

    function TextArea$$1() {
        classCallCheck(this, TextArea$$1);
        return possibleConstructorReturn(this, (TextArea$$1.__proto__ || Object.getPrototypeOf(TextArea$$1)).apply(this, arguments));
    }

    createClass(TextArea$$1, [{
        key: 'render',
        value: function render() {
            var _this4 = this;

            var _props2 = this.props,
                errorMessages = _props2.errorMessages,
                validators = _props2.validators,
                requiredError = _props2.requiredError,
                validatorListener = _props2.validatorListener,
                rest = objectWithoutProperties(_props2, ['errorMessages', 'validators', 'requiredError', 'validatorListener']);

            return React__default.createElement(TextArea, _extends({}, rest, {
                ref: function ref(r) {
                    _this4.input = r;
                },
                error: !this.state.isValid,
                errormsg: this.errorText()
            }));
        }
    }, {
        key: 'errorText',
        value: function errorText() {
            var isValid = this.state.isValid;


            if (isValid) {
                return null;
            }

            return React__default.createElement(
                'div',
                { style: { color: 'red' } },
                this.getErrorMessage()
            );
        }
    }]);
    return TextArea$$1;
}(lib_1);

var Dropdown = function (_ValidatorComponent3) {
    inherits(Dropdown, _ValidatorComponent3);

    function Dropdown() {
        classCallCheck(this, Dropdown);
        return possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).apply(this, arguments));
    }

    createClass(Dropdown, [{
        key: 'render',
        value: function render() {
            var _this6 = this;

            var _props3 = this.props,
                errorMessages = _props3.errorMessages,
                validators = _props3.validators,
                requiredError = _props3.requiredError,
                validatorListener = _props3.validatorListener,
                rest = objectWithoutProperties(_props3, ['errorMessages', 'validators', 'requiredError', 'validatorListener']);

            return React__default.createElement(Drop, _extends({}, rest, {
                ref: function ref(r) {
                    _this6.input = r;
                },
                error: !this.state.isValid,
                errormsg: this.errorText(),
                input: this.input
            }));
        }
    }, {
        key: 'errorText',
        value: function errorText() {
            var isValid = this.state.isValid;


            if (isValid) {
                return null;
            }

            return React__default.createElement(
                'div',
                { style: { color: 'red' } },
                this.getErrorMessage()
            );
        }
    }]);
    return Dropdown;
}(lib_1);

var Form = function (_React$Component) {
    inherits(Form, _React$Component);

    function Form() {
        classCallCheck(this, Form);
        return possibleConstructorReturn(this, (Form.__proto__ || Object.getPrototypeOf(Form)).apply(this, arguments));
    }

    createClass(Form, [{
        key: 'render',
        value: function render() {
            return React__default.createElement(
                lib_2,
                _extends({
                    className: 'ui form'
                }, this.props),
                this.props.children
            );
        }
    }]);
    return Form;
}(React__default.Component);

Form.addValidationRule = function (type, callback) {
    lib_2.addValidationRule(type, callback);
};

exports.Input = Input;
exports.TextArea = TextArea$1;
exports.Dropdown = Dropdown;
exports.Form = Form;
//# sourceMappingURL=index.js.map
